#!/usr/bin/env bash

set -euo pipefail

script_dir="$(readlink -e "${BASH_SOURCE[0]}")"
script_dir="$(dirname "$script_dir")"
common_sh_path="$(readlink -e "$script_dir/../bin/common.sh")"
. "$common_sh_path"
unset common_sh_path

PROGRAM_NAME=build

function print_usage ()
{
  cat <<'EOF'
Usage: build [OPTION]...
Build ICU4C.

  --build-dir=<DIR>          The build directory (mandatory).
  --verbose                  Display verbose output.
  -h, --help                 Display this help and exit.
EOF
}

if getopt -T; (( $? != 4 )); then
  die_with_runtime_error "$PROGRAM_NAME" "\`getopt' is not an enhanced version."
fi
opts="$(getopt -n "$PROGRAM_NAME" -l build-dir:,verbose,help -- h "$@")"
eval set -- "$opts"

while (( $# > 0 )); do
  arg="$1"
  shift
  case "$arg" in
  --build-dir)
    if (( $# == 0 )); then
      die_with_logic_error "$PROGRAM_NAME"
    fi
    build_dir="$1"
    shift
    ;;
  --verbose)
    verbose=yes
    ;;
  -h|--help)
    set +x
    print_usage
    exit 0
    ;;
  --)
    if (( $# > 0 )); then
      die_with_user_error "$PROGRAM_NAME" "An invalid argument \`$1'."
    fi
    break
    ;;
  *)
    die_with_user_error "$PROGRAM_NAME" "An invalid argument \`$arg'."
    ;;
  esac
done

make_args=()

# Check whether this script is (directly or indirectly) called from `make'.
if ! declare -p MAKEFLAGS 2>/dev/null | grep -Eq '^declare -x MAKEFLAGS='; then
  make_args+=(-j -l "$(nproc)")
fi

temp_dir="$(mktemp -d)" \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to create a temporary directory."
push_rollback_command "rm -rf \"$temp_dir\""

if [[ ${build_dir-NOT-DEFINED} == NOT-DEFINED ]]; then
  die_with_user_error "$PROGRAM_NAME" "\`--build-dir' option is mandatory."
fi
if [[ -z $build_dir ]]; then
  die_with_user_error "$PROGRAM_NAME" "An invalid value \`$build_dir' for \`--build-dir' option."
fi
if [[ $(readlink -m "$build_dir") != $(cd "$temp_dir" >/dev/null && readlink -m "$build_dir") ]]; then
  die_with_user_error "$PROGRAM_NAME" "A relative path \`$build_dir' is specified for \`--build-dir' option, but is expected to be an absolute one."
fi

if [[ ${verbose+DEFINED} == DEFINED ]]; then
  case "$verbose" in
  yes)
    # If this script is (either directly or indirectly) called by a parent
    # `make', then the command-line options specified to the parent `make' are
    # also passed on to `make' to be called below in this script through
    # `MAKEFLAGS' environment variable. And it may include options controlling
    # the output of the called `make', e.g., `-s'. Therefore, in such a case,
    # note that the called `make' may behave as if there were no effect by
    # `VERBOSE=1'.
    make_args+=(VERBOSE=1)
    ;;
  *)
    die_with_logic_error "$PROGRAM_NAME"
    ;;
  esac
fi

(cd "$build_dir" && make ${make_args[@]+"${make_args[@]}"}) \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to \`make' ICU4C."
