#!/usr/bin/env bash

set -euo pipefail

script_dir="$(readlink -e "${BASH_SOURCE[0]}")"
script_dir="$(dirname "$script_dir")"
common_sh_path="$(readlink -e "$script_dir/../bin/common.sh")"
. "$common_sh_path"
unset common_sh_path

PROGRAM_NAME=configure

function print_usage ()
{
  cat <<'EOF'
Usage: configure [OPTION]... --platform=<PLATFORM> -- [CONFIGURE_OPTIONS]...
Configure ICU4C.

  --source-dir=<DIR>         The source directory (mandatory).
  --build-dir=<DIR>          The build directory (mandatory).
  --enable-debug             Pass `--enable-debug' on to ICU4C
                             `runConfigureICU' script.
  --disable-release          Pass `--disable-release' on to ICU4C
                             `runConfigureICU' script.
  --platform=<PLATFORM>      Pass <PLATFORM> on to ICU4C `runConfigureICU'
                             script (mandatory).
  --cc=<CC>                  Pass `CC=<CC>' on to `runConfigureICU' script.
  --cflags=<CFLAGS>          Pass `CFLAGS=<CFLAGS>' on to `runConfigureICU'
                             script.
  --cxx=<CXX>                Pass `CXX=<CXX>' on to `runConfigureICU' script.
  --cxxflags=<CXXFLAGS>      Pass `CXXFLAGS=<CXXFLAGS>' on to
                             `runConfigureICU' script.
  --ldflags=<LDFLAGS>        Pass `LDFLAGS=<LDFLAGS>' on to `runConfigureICU'
                             script.
  -h, --help                 Display this help and exit.
EOF
}

if getopt -T; (( $? != 4 )); then
  die_with_runtime_error "$PROGRAM_NAME" "\`getopt' is not an enhanced version."
fi
opts="$(getopt -n "$PROGRAM_NAME" -l source-dir:,build-dir:,enable-debug,disable-release,platform:,cc:,cflags:,cxx:,cxxflags:,ldflags:,help -- h "$@")"
eval set -- "$opts"

while (( $# > 0 )); do
  arg="$1"
  shift
  case "$arg" in
  --source-dir)
    if (( $# == 0 )); then
      die_with_logic_error "$PROGRAM_NAME"
    fi
    source_dir="$1"
    shift
    ;;
  --build-dir)
    if (( $# == 0 )); then
      die_with_logic_error "$PROGRAM_NAME"
    fi
    build_dir="$1"
    shift
    ;;
  --enable-debug)
    enable_debug=yes
    ;;
  --disable-release)
    disable_release=yes
    ;;
  --platform)
    if (( $# == 0 )); then
      die_with_logic_error "$PROGRAM_NAME"
    fi
    platform="$1"
    shift
    ;;
  --cc)
    if (( $# == 0 )); then
      die_with_logic_error "$PROGRAM_NAME"
    fi
    cc="$1"
    shift
    ;;
  --cflags)
    if (( $# == 0 )); then
      die_with_logic_error "$PROGRAM_NAME"
    fi
    cflags="$1"
    shift
    ;;
  --cxx)
    if (( $# == 0 )); then
      die_with_logic_error "$PROGRAM_NAME"
    fi
    cxx="$1"
    shift
    ;;
  --cxxflags)
    if (( $# == 0 )); then
      die_with_logic_error "$PROGRAM_NAME"
    fi
    cxxflags="$1"
    shift
    ;;
  --ldflags)
    if (( $# == 0 )); then
      die_with_logic_error "$PROGRAM_NAME"
    fi
    ldflags="$1"
    shift
    ;;
  -h|--help)
    set +x
    print_usage
    exit 0
    ;;
  --)
    if (( $# > 0 )); then
      die_with_user_error "$PROGRAM_NAME" "An invalid argument \`$1'."
    fi
    break
    ;;
  *)
    die_with_user_error "$PROGRAM_NAME" "An invalid argument \`$arg'."
    ;;
  esac
done

configure_options=()

if [[ ${source_dir-NOT-DEFINED} == NOT-DEFINED ]]; then
  die_with_user_error "$PROGRAM_NAME" "\`--source-dir' option is mandatory."
fi
if ! is_absolute_path "$source_dir"; then
  die_with_user_error "$PROGRAM_NAME" "A relative path \`$source_dir' is specified for \`--source-dir' option, but is expected to be an absolute one."
fi

if [[ ${build_dir-NOT-DEFINED} == NOT-DEFINED ]]; then
  die_with_user_error "$PROGRAM_NAME" "\`--build-dir' option is mandatory."
fi
if ! is_absolute_path "$build_dir"; then
  die_with_user_error "$PROGRAM_NAME" "A relative path \`$build_dir' is specified for \`--build-dir' option, but is expected to be an absolute one."
fi

mkdir -p "$build_dir" \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to create the build directory \`$build_dir'."

case "${enable_debug-no}" in
yes)
  configure_options+=(--enable-debug)
  ;;
no)
  ;;
*)
  die_with_logic_error "$PROGRAM_NAME"
  ;;
esac

case "${disable_release-no}" in
yes)
  configure_options+=(--disable-release)
  ;;
no)
  ;;
*)
  die_with_logic_error "$PROGRAM_NAME"
  ;;
esac

if [[ ${platform-NOT-DEFINED} == NOT-DEFINED ]]; then
  die_with_user_error "$PROGRAM_NAME" "\`--platform' option is mandatory."
fi
configure_options+=("$platform")

env_vars=()

if [[ ${cc+DEFINED} == DEFINED ]]; then
  env_vars+=("CC=$cc")
fi
if [[ ${cflags+DEFINED} == DEFINED ]]; then
  env_vars+=("CFLAGS=$cflags")
fi
if [[ ${cxx+DEFINED} == DEFINED ]]; then
  env_vars+=("CXX=$cxx")
fi
if [[ ${cxxflags+DEFINED} == DEFINED ]]; then
  env_vars+=("CXXFLAGS=$cxxflags")
fi
if [[ ${ldflags+DEFINED} == DEFINED ]]; then
  env_vars+=("LDFLAGS=$ldflags")
fi

# `runConfigureICU <PLATFORM> VAR=VAL' does not work if `VAL' has a space.
# Therefore, pass `VAR=VAL' on to ICU4C's configure script via environment
# variable.
(cd "$build_dir" || exit $?
 env                                                  \
   ${env_vars[@]+"${env_vars[@]}"}                    \
   "$source_dir/source/runConfigureICU"               \
   ${configure_options[@]+"${configure_options[@]}"}) \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to execute \`runConfigureICU'."
