#!/usr/bin/env bash

set -euo pipefail

script_dir="$(readlink -e "${BASH_SOURCE[0]}")"
script_dir="$(dirname "$script_dir")"
common_sh_path="$(readlink -e "$script_dir/../bin/common.sh")"
. "$common_sh_path"
unset common_sh_path

PROGRAM_NAME=install
URL_PREFIX='https://ftpmirror.gnu.org/gcc/'

function print_usage ()
{
  cat <<'EOF'
Usage: install [OPTION]...
Install GCC.

  --version=<VERSION>        The version of GCC to install (default: the
                             latest release version).
  --prefix=<DIR>             Pass `--prefix=<DIR>' on to GCC `configure'
                             script.
  --source-dir=<DIR>         The source directory (default: a temporary
                             directory that will be deleted when this script
                             exits).
  --clobber-source-dir       Delete the source directory before the source
                             archive is expanded there.
  -h, --help                 Display this help and exit.
EOF
}

if getopt -T; (( $? != 4 )); then
  die_with_runtime_error "$PROGRAM_NAME" "\`getopt' is not an enhanced version."
fi

opts="$(getopt -n "$PROGRAM_NAME" -l version:,prefix:,source-dir:,clobber-source-dir,help -- h "$@")"
eval set -- "$opts"

expect_rest_args=no
while (( $# > 0 )); do
  arg="$1"
  shift
  if [[ $expect_rest_args == yes ]]; then
    die_with_user_error "$PROGRAM_NAME" "An invalid argument \`$arg'."
  fi
  case "$arg" in
  --version)
    if (( $# == 0 )); then
      die_with_logic_error "$PROGRAM_NAME"
    fi
    version="$1"
    shift
    ;;
  --prefix)
    if (( $# == 0 )); then
      die_with_logic_error "$PROGRAM_NAME"
    fi
    prefix="$1"
    shift
    ;;
  --source-dir)
    if (( $# == 0 )); then
      die_with_logic_error "$PROGRAM_NAME"
    fi
    source_dir="$1"
    shift
    ;;
  --clobber-source-dir)
    clobber_source_dir=yes
    ;;
  -h|--help)
    set +x
    print_usage
    exit 0
    ;;
  --)
    expect_rest_args=yes
    ;;
  *)
    die_with_user_error "$PROGRAM_NAME" "An invalid argument \`$arg'."
    ;;
  esac
done
unset expect_rest_args

configure_options=()

if [[ ${version-NOT-DEFINED} == NOT-DEFINED ]]; then
  version="$({ curl -fLsS "$URL_PREFIX" || exit $?; }                                                            \
               | { grep -Eo 'gcc-[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+/' || exit $?; }                        \
               | { sed -e 's@gcc-\([[:digit:]]\{1,\}\.[[:digit:]]\{1,\}\.[[:digit:]]\{1,\}\)/@\1@' || exit $?; } \
               | { sort -V || exit $?; }                                                                         \
               | tail -n 1)" || status=$?
  if (( "${status-0}" != 0 )) || [[ ! $version =~ ^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$ ]]; then
    die_with_runtime_error "$PROGRAM_NAME" "Failed to extract GCC latest version."
  fi
fi
if [[ ! $version =~ ^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$ ]]; then
  die_with_user_error "$PROGRAM_NAME" "An invalid value \`$version' for \`--version' option."
fi

if [[ ${prefix+DEFINED} == DEFINED ]]; then
  configure_options+=("--prefix=$prefix")
fi

temp_dir="$(mktemp -d)" \
  || die_with_runtime_error "Failed to create a temporary directory."

push_rollback_command "rm -rf \"$temp_dir\""

: "${source_dir=$temp_dir/src}"
if [[ -z $source_dir ]]; then
  die_with_user_error "$PROGRAM_NAME" "An invalid value \`$source_dir' for \`--source-dir' option."
fi
if [[ $(readlink -m "$source_dir") != $(cd "$temp_dir" >/dev/null && readlink -m "$source_dir") ]]; then
  die_with_user_error "$PROGRAM_NAME" "A relative path \`$source_dir' for \`--source-dir' option, but is expected to be an absolute one."
fi

: "${clobber_source_dir=no}"

if [[ -e $source_dir ]]; then
  case "$clobber_source_dir" in
  yes)
    rm -rf "$source_dir"
    ;;
  no)
    die_with_user_error "$PROGRAM_NAME" "Could not overwrite \`$source_dir'. Use \`--clobber-source-dir' to overwrite it."
    ;;
  *)
    die_with_logic_error "$PROGRAM_NAME"
    ;;
  esac
fi
mkdir -p "$source_dir" \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to create the source directory \`$source_dir'."

# B215C1633BCA0477615F1B35A5B3A004745C015A: dsa1024 1999-11-09 Gerald Pfeifer <gerald@pfeifer.com>
# B3C42148A44E6983B3E4CC0793FA9B1AB75C61B8: dsa1024 2003-04-10 Mark Mitchell <mark@codesourcery.com>
# 90AA470469D3965A87A5DCB494D03953902C9419: dsa1024 2004-12-06 Gabriel Dos Reis <gdr@acm.org>
# 80F98B2E0DAB6C8281BDF541A7C8C3B2F71EDF1C: dsa1024 2000-02-13 Joseph Samuel Myers <jsm@polyomino.org.uk>
# 7F74F97C103468EE5D750B583AB00996FC26A641: dsa1024 2001-06-26 Richard Guenther <richard.guenther@gmail.com>
# 33C235A34C46AA3FFB293709A328C3A2C3C45C06: dsa1024 2004-04-21 Jakub Jelinek <jakub@redhat.com>
key_ids=(B215C1633BCA0477615F1B35A5B3A004745C015A  \
         B3C42148A44E6983B3E4CC0793FA9B1AB75C61B8  \
         90AA470469D3965A87A5DCB494D03953902C9419  \
         80F98B2E0DAB6C8281BDF541A7C8C3B2F71EDF1C  \
         7F74F97C103468EE5D750B583AB00996FC26A641  \
         33C235A34C46AA3FFB293709A328C3A2C3C45C06)
key_servers=('hkp://keys.gnupg.net:80'               \
             'hkp://zimmermann.mayfirst.org:80'      \
             'hkp://pgp.key-server.io:80'            \
             'hkp://keyserver.ubuntu.com:80'         \
             'hkp://p80.pool.sks-keyservers.net:80')
for key_server in "${key_servers[@]}"; do
  timeout 30 gpg --homedir "$temp_dir/.gnupg" --batch --keyserver "$key_server" --recv-keys "${key_ids[@]}" && break
done

(cd "$temp_dir" && curl -fLsSo "gcc-$version.tar.xz" "${URL_PREFIX}gcc-$version/gcc-$version.tar.xz") \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to download \`gcc-$version.tar.xz'."
(cd "$temp_dir" && curl -fLsSo "gcc-$version.tar.xz.sig" "${URL_PREFIX}gcc-$version/gcc-$version.tar.xz.sig") \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to download \`gcc-$version.tar.xz.sig'."
gpg --homedir "$temp_dir/.gnupg" --batch --verify "$temp_dir/gcc-$version.tar.xz.sig" "$temp_dir/gcc-$version.tar.xz" \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to verify the signature in \`gcc-$version.tar.xz.sig'."
rm "$temp_dir/gcc-$version.tar.xz.sig"

tar -xf "$temp_dir/gcc-$version.tar.xz" -C "$source_dir" --strip-components=1 \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to expand \`gcc-$version.tar.xz'."
rm "$temp_dir/gcc-$version.tar.xz"

(cd "$source_dir" && timeout 60 ./contrib/download_prerequisites) \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to download the prerequisites to build GCC."
rm "$source_dir"/*.tar.*

build_dir="$temp_dir/build"
mkdir -p "$build_dir"

(cd "$build_dir" && "$source_dir/configure" --disable-multilib --enable-languages=c,c++ "${configure_options[@]}") \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to \`configure' GCC."

(cd "$build_dir" && make -j $(nproc) ) \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to \`make' GCC."

(cd "$build_dir" && make install-strip) \
  || die_with_runtime_error "$PROGRAM_NAME" "Failed to \`make install-strip' GCC."
